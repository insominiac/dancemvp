generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  passwordHash    String         @map("password_hash")
  fullName        String         @map("full_name")
  phone           String?
  role            UserRole       @default(USER)
  bio             String?
  profileImage    String?        @map("profile_image")
  isVerified      Boolean        @default(false) @map("is_verified")
  websiteUrl      String?        @map("website_url")
  instagramHandle String?        @map("instagram_handle")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  auditLogs       AuditLog[]
  bookings        Booking[]
  organizedEvents Event[]
  forumPosts      ForumPost[]
  forumReplies    ForumReply[]
  instructor      Instructor?
  notifications   Notification[]
  sessions        Session[]
  testimonials    Testimonial[]
  transactions    Transaction[]
  partnerProfile  UserProfile?
  userStyles      UserStyle[]

  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Instructor {
  id               String            @id @default(cuid())
  userId           String            @unique @map("user_id")
  specialty        String?
  experienceYears  Int?              @map("experience_years")
  rating           Decimal?          @db.Decimal(3, 2)
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  classInstructors ClassInstructor[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("instructors")
}

model Class {
  id               String            @id @default(cuid())
  title            String
  description      String
  level            String
  durationMins     Int               @map("duration_mins")
  maxCapacity      Int               @map("max_capacity")
  price            Decimal           @db.Decimal(10, 2)
  scheduleDays     String?           @map("schedule_days")
  scheduleTime     String?           @map("schedule_time")
  requirements     String?
  imageUrl         String?           @map("image_url")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  endDate          DateTime?         @map("end_date")
  startDate        DateTime?         @map("start_date")
  venueId          String?           @map("venue_id")
  status           ClassStatus       @default(DRAFT)
  bookings         Booking[]
  classInstructors ClassInstructor[]
  classStyles      ClassStyle[]
  venue            Venue?            @relation(fields: [venueId], references: [id])

  @@index([createdAt])
  @@index([isActive])
  @@index([startDate])
  @@index([venueId])
  @@index([status])
  @@map("classes")
}

model Event {
  id               String       @id @default(cuid())
  title            String
  description      String
  eventType        String       @map("event_type")
  startDate        DateTime     @map("start_date")
  endDate          DateTime     @map("end_date")
  startTime        String       @map("start_time")
  endTime          String       @map("end_time")
  venueId          String       @map("venue_id")
  price            Decimal      @db.Decimal(10, 2)
  maxAttendees     Int          @map("max_attendees")
  currentAttendees Int          @default(0) @map("current_attendees")
  imageUrl         String?      @map("image_url")
  organizerUserId  String?      @map("organizer_user_id")
  status           EventStatus  @default(DRAFT)
  isFeatured       Boolean      @default(false) @map("is_featured")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  bookings         Booking[]
  eventStyles      EventStyle[]
  organizer        User?        @relation(fields: [organizerUserId], references: [id])
  venue            Venue        @relation(fields: [venueId], references: [id])

  @@index([venueId])
  @@index([startDate, startTime])
  @@index([status])
  @@map("events")
}

model Venue {
  id           String   @id @default(cuid())
  name         String
  addressLine1 String   @map("address_line1")
  addressLine2 String?  @map("address_line2")
  city         String
  state        String
  country      String
  postalCode   String   @map("postal_code")
  latitude     Decimal? @db.Decimal(9, 6)
  longitude    Decimal? @db.Decimal(9, 6)
  phone        String?
  websiteUrl   String?  @map("website_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  classes      Class[]
  events       Event[]

  @@index([name])
  @@index([city])
  @@index([country])
  @@map("venues")
}

model ClassInstructor {
  id           String     @id @default(cuid())
  classId      String     @map("class_id")
  instructorId String     @map("instructor_id")
  isPrimary    Boolean    @default(false) @map("is_primary")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  class        Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@unique([classId, instructorId])
  @@map("class_instructors")
}

model Booking {
  id               String        @id @default(cuid())
  userId           String        @map("user_id")
  classId          String?       @map("class_id")
  eventId          String?       @map("event_id")
  bookingDate      DateTime      @default(now()) @map("booking_date")
  status           BookingStatus @default(PENDING)
  amountPaid       Decimal       @map("amount_paid") @db.Decimal(10, 2)
  paymentMethod    String?       @map("payment_method")
  notes            String?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  confirmationCode String?       @map("confirmation_code")
  discountAmount   Decimal       @default(0) @map("discount_amount") @db.Decimal(10, 2)
  paymentStatus    String        @default("pending") @map("payment_status")
  stripeSessionId  String?       @map("stripe_session_id")
  taxAmount        Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  totalAmount      Decimal       @default(0) @map("total_amount") @db.Decimal(10, 2)
  class            Class?        @relation(fields: [classId], references: [id], onDelete: Cascade)
  event            Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     Transaction[]

  @@index([userId])
  @@index([createdAt])
  @@index([status])
  @@index([paymentStatus])
  @@index([stripeSessionId])
  @@map("bookings")
}

model Transaction {
  id                String            @id @default(cuid())
  bookingId         String?           @map("booking_id")
  userId            String            @map("user_id")
  provider          PaymentProvider
  providerPaymentId String?           @map("provider_payment_id")
  providerRefundId  String?           @map("provider_refund_id")
  type              TransactionType
  status            TransactionStatus @default(CREATED)
  amount            Decimal           @db.Decimal(10, 2)
  currency          String            @default("USD")
  payload           String?
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  brand             String?
  failureReason     String?           @map("failure_reason")
  last4             String?           @map("last_4")
  paymentMethodType String?           @map("payment_method_type")
  stripeSessionId   String?           @map("stripe_session_id")
  booking           Booking?          @relation(fields: [bookingId], references: [id])
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerPaymentId])
  @@index([stripeSessionId])
  @@map("transactions")
}

model DanceStyle {
  id              String                  @id @default(cuid())
  name            String                  @unique
  category        String?
  isActive        Boolean                 @default(true) @map("is_active")
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @updatedAt @map("updated_at")
  benefits        String?
  characteristics String?
  description     String?
  difficulty      String?
  icon            String?
  image           String?
  instructors     String?
  isFeatured      Boolean                 @default(false) @map("is_featured")
  musicStyle      String?
  origin          String?
  price           String?
  schedule        String?
  sortOrder       Int?                    @map("sort_order")
  subtitle        String?
  videoUrl        String?                 @map("video_url")
  classStyles     ClassStyle[]
  eventStyles     EventStyle[]
  profileStyles   UserProfileDanceStyle[]
  userStyles      UserStyle[]

  @@index([isActive])
  @@index([isFeatured])
  @@index([sortOrder])
  @@map("dance_styles")
}

model UserStyle {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  styleId     String      @map("style_id")
  proficiency Proficiency @default(BEGINNER)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  style       DanceStyle  @relation(fields: [styleId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, styleId])
  @@map("user_styles")
}

model ClassStyle {
  id        String     @id @default(cuid())
  classId   String     @map("class_id")
  styleId   String     @map("style_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  class     Class      @relation(fields: [classId], references: [id], onDelete: Cascade)
  style     DanceStyle @relation(fields: [styleId], references: [id])

  @@unique([classId, styleId])
  @@map("class_styles")
}

model EventStyle {
  id        String     @id @default(cuid())
  eventId   String     @map("event_id")
  styleId   String     @map("style_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  style     DanceStyle @relation(fields: [styleId], references: [id])

  @@unique([eventId, styleId])
  @@map("event_styles")
}

model ForumPost {
  id           String       @id @default(cuid())
  userId       String       @map("user_id")
  category     String
  title        String
  content      String
  viewsCount   Int          @default(0) @map("views_count")
  likesCount   Int          @default(0) @map("likes_count")
  repliesCount Int          @default(0) @map("replies_count")
  isPinned     Boolean      @default(false) @map("is_pinned")
  isLocked     Boolean      @default(false) @map("is_locked")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  user         User         @relation(fields: [userId], references: [id], onDelete: SetNull)
  replies      ForumReply[]

  @@index([createdAt])
  @@map("forum_posts")
}

model ForumReply {
  id         String       @id @default(cuid())
  postId     String       @map("post_id")
  userId     String       @map("user_id")
  parentId   String?      @map("parent_id")
  content    String
  likesCount Int          @default(0) @map("likes_count")
  isSolution Boolean      @default(false) @map("is_solution")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  parent     ForumReply?  @relation("ReplyToReply", fields: [parentId], references: [id], onDelete: Cascade)
  replies    ForumReply[] @relation("ReplyToReply")
  post       ForumPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@map("forum_replies")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  priority  String   @default("normal")
  actionUrl String?  @map("action_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationTemplate {
  id         String   @id @default(cuid())
  name       String   @unique
  title      String
  message    String
  type       String
  priority   String   @default("NORMAL")
  isActive   Boolean  @default(true) @map("is_active")
  usageCount Int      @default(0) @map("usage_count")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("notification_templates")
}

model Session {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  userRole       UserRole @map("user_role")
  deviceId       String   @map("device_id")
  deviceInfo     String?  @map("device_info")
  ipAddress      String   @map("ip_address")
  userAgent      String?  @map("user_agent")
  isActive       Boolean  @default(true) @map("is_active")
  lastAccessedAt DateTime @default(now()) @map("last_accessed_at")
  expiresAt      DateTime @map("expires_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([deviceId, userRole])
  @@index([userId])
  @@index([deviceId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("sessions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String
  tableName String   @map("table_name")
  recordId  String   @map("record_id")
  oldValues String?  @map("old_values")
  newValues String?  @map("new_values")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model ContactMessage {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String?
  subject       String
  message       String
  isRead        Boolean  @default(false) @map("is_read")
  adminResponse String?  @map("admin_response")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("contact_messages")
}

model Testimonial {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  rating     Int
  message    String
  isFeatured Boolean  @default(false) @map("is_featured")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("testimonials")
}

model UserProfile {
  id                  String                  @id @default(cuid())
  userId              String                  @unique @map("user_id")
  bio                 String?
  location            String?
  latitude            Decimal?                @db.Decimal(9, 6)
  longitude           Decimal?                @db.Decimal(9, 6)
  experienceLevel     ExperienceLevel         @default(BEGINNER) @map("experience_level")
  lookingFor          PartnerLookingFor[]     @map("looking_for")
  ageRange            String?                 @map("age_range")
  profilePicture      String?                 @map("profile_picture")
  isActiveForMatching Boolean                 @default(true) @map("is_active_for_matching")
  lastActiveAt        DateTime                @default(now()) @map("last_active_at")
  createdAt           DateTime                @default(now()) @map("created_at")
  updatedAt           DateTime                @updatedAt @map("updated_at")
  receivedRequests    MatchRequest[]          @relation("ReceivedRequests")
  sentRequests        MatchRequest[]          @relation("SentRequests")
  danceStyles         UserProfileDanceStyle[]
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([location])
  @@index([experienceLevel])
  @@index([isActiveForMatching])
  @@index([lastActiveAt])
  @@map("user_profiles")
}

model UserProfileDanceStyle {
  id        String          @id @default(cuid())
  profileId String          @map("profile_id")
  styleId   String          @map("style_id")
  level     ExperienceLevel
  createdAt DateTime        @default(now()) @map("created_at")
  profile   UserProfile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  style     DanceStyle      @relation(fields: [styleId], references: [id])

  @@unique([profileId, styleId])
  @@map("user_profile_dance_styles")
}

model MatchRequest {
  id          String      @id @default(cuid())
  senderId    String      @map("sender_id")
  receiverId  String      @map("receiver_id")
  status      MatchStatus @default(PENDING)
  message     String?
  createdAt   DateTime    @default(now()) @map("created_at")
  respondedAt DateTime?   @map("responded_at")
  expiresAt   DateTime    @map("expires_at")
  receiver    UserProfile @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      UserProfile @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([status])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("match_requests")
}

model Match {
  id          String    @id @default(cuid())
  user1Id     String    @map("user1_id")
  user2Id     String    @map("user2_id")
  matchScore  Float     @default(0) @map("match_score")
  createdAt   DateTime  @default(now()) @map("created_at")
  isActive    Boolean   @default(true) @map("is_active")
  unmatchedAt DateTime? @map("unmatched_at")
  unmatchedBy String?   @map("unmatched_by")

  @@unique([user1Id, user2Id])
  @@index([isActive])
  @@index([createdAt])
  @@map("matches")
}

enum UserRole {
  USER
  INSTRUCTOR
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum ClassStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  OTHER
}

enum TransactionType {
  PAYMENT
  REFUND
  ADJUSTMENT
}

enum TransactionStatus {
  CREATED
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELLED
}

enum Proficiency {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum PartnerLookingFor {
  PRACTICE_PARTNER
  COMPETITION_PARTNER
  SOCIAL_PARTNER
  LEARNING_BUDDY
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
